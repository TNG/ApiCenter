package com.tngtech.apicenter.backend.config

import org.springframework.boot.jdbc.DataSourceBuilder
import org.springframework.cache.CacheManager
import org.springframework.cache.support.NoOpCacheManager
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.jdbc.core.JdbcTemplate
import org.springframework.jdbc.datasource.DataSourceTransactionManager
import org.springframework.security.acls.jdbc.BasicLookupStrategy
import org.springframework.security.acls.jdbc.JdbcMutableAclService
import org.springframework.security.acls.AclPermissionEvaluator
import org.springframework.security.acls.domain.*
import org.springframework.security.acls.model.PermissionGrantingStrategy
import org.springframework.security.core.authority.SimpleGrantedAuthority
import javax.sql.DataSource
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.security.core.authority.AuthorityUtils
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken
import org.springframework.transaction.PlatformTransactionManager
import org.springframework.transaction.support.AbstractPlatformTransactionManager

@Configuration
class AclConfiguration {

    @Bean
    fun transactionManager(
            dataSource: DataSource
    ): AbstractPlatformTransactionManager {
        return DataSourceTransactionManager(dataSource)
    }

    @Bean
    fun dataSource(): DataSource {
        val dataSource = DataSourceBuilder
                .create()
                .username("user")
                .password("pwd")
                .url("jdbc:h2:mem:db;DB_CLOSE_DELAY=-1")
                .driverClassName("org.h2.Driver")
                .build()
        val template = JdbcTemplate(dataSource)

        SecurityContextHolder.getContext().authentication =
                UsernamePasswordAuthenticationToken("ph", "ignored", AuthorityUtils
                        .createAuthorityList("ROLE_IGNORED"))

        template.execute("DROP TABLE IF EXISTS CONTACTS")
        template.execute("DROP TABLE IF EXISTS AUTHORITIES")
        template.execute("DROP TABLE IF EXISTS USERS")
        template.execute("DROP TABLE IF EXISTS ACL_ENTRY")
        template.execute("DROP TABLE IF EXISTS ACL_OBJECT_IDENTITY")
        template.execute("DROP TABLE IF EXISTS ACL_CLASS")
        template.execute("DROP TABLE IF EXISTS ACL_SID")

        // The ACL tables are not created by Spring automatically (?!)
        template.execute("CREATE TABLE ACL_SID("
                + "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL PRIMARY KEY,"
                + "PRINCIPAL BOOLEAN NOT NULL," + "SID VARCHAR_IGNORECASE(100) NOT NULL,"
                + "CONSTRAINT UNIQUE_UK_1 UNIQUE(SID,PRINCIPAL));")
        template.execute("CREATE TABLE ACL_CLASS("
                + "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL PRIMARY KEY,"
                + "CLASS VARCHAR_IGNORECASE(100) NOT NULL,"
                + "CLASS_ID_TYPE VARCHAR_IGNORECASE(100),"
                + "CONSTRAINT UNIQUE_UK_2 UNIQUE(CLASS));")
        template.execute("CREATE TABLE ACL_OBJECT_IDENTITY("
                + "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL PRIMARY KEY,"
                + "OBJECT_ID_CLASS BIGINT NOT NULL,"
                + "OBJECT_ID_IDENTITY VARCHAR_IGNORECASE(36) NOT NULL,"
                + "PARENT_OBJECT BIGINT,"
                + "OWNER_SID BIGINT,"
                + "ENTRIES_INHERITING BOOLEAN NOT NULL,"
                + "CONSTRAINT UNIQUE_UK_3 UNIQUE(OBJECT_ID_CLASS,OBJECT_ID_IDENTITY),"
                + "CONSTRAINT FOREIGN_FK_1 FOREIGN KEY(PARENT_OBJECT)REFERENCES ACL_OBJECT_IDENTITY(ID),"
                + "CONSTRAINT FOREIGN_FK_2 FOREIGN KEY(OBJECT_ID_CLASS)REFERENCES ACL_CLASS(ID),"
                + "CONSTRAINT FOREIGN_FK_3 FOREIGN KEY(OWNER_SID)REFERENCES ACL_SID(ID));")
        template.execute("CREATE TABLE ACL_ENTRY("
                + "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL PRIMARY KEY,"
                + "ACL_OBJECT_IDENTITY BIGINT NOT NULL,ACE_ORDER INT NOT NULL,SID BIGINT NOT NULL,"
                + "MASK INTEGER NOT NULL,GRANTING BOOLEAN NOT NULL,AUDIT_SUCCESS BOOLEAN NOT NULL,"
                + "AUDIT_FAILURE BOOLEAN NOT NULL,CONSTRAINT UNIQUE_UK_4 UNIQUE(ACL_OBJECT_IDENTITY,ACE_ORDER),"
                + "CONSTRAINT FOREIGN_FK_4 FOREIGN KEY(ACL_OBJECT_IDENTITY) REFERENCES ACL_OBJECT_IDENTITY(ID),"
                + "CONSTRAINT FOREIGN_FK_5 FOREIGN KEY(SID) REFERENCES ACL_SID(ID));")

        template.execute("CREATE TABLE USERS(USERNAME VARCHAR_IGNORECASE(50) NOT NULL PRIMARY KEY);")
        template.execute("INSERT INTO USERS VALUES('user');")

        return dataSource
    }

    @Bean
    fun cacheManager(): CacheManager {
        return NoOpCacheManager()
    }

    @Bean
    fun jdbcMutableAclService(
            dataSource: DataSource,
            lookupStrategy: BasicLookupStrategy,
            aclCache: SpringCacheBasedAclCache
    ): JdbcMutableAclService {
        return JdbcMutableAclService(dataSource, lookupStrategy, aclCache)
    }

    @Bean
    fun lookupStrategy(
            dataSource: DataSource,
            aclCache: SpringCacheBasedAclCache,
            aclAuthorizationStrategy: AclAuthorizationStrategy,
            defaultPermissionGrantingStrategy: DefaultPermissionGrantingStrategy
    ): BasicLookupStrategy {
        return BasicLookupStrategy(dataSource, aclCache, aclAuthorizationStrategy, defaultPermissionGrantingStrategy)
    }

    @Bean
    fun aclCache(
            cacheManager: CacheManager,
            permissionGrantingStrategy: PermissionGrantingStrategy,
            aclAuthorizationStrategy: AclAuthorizationStrategy
    ): SpringCacheBasedAclCache {
        // This fails to build / cache is null when using anything other than the NoOpCache
        val cache = cacheManager.getCache("aclCache")
        return SpringCacheBasedAclCache(cache, permissionGrantingStrategy, aclAuthorizationStrategy)
    }

    @Bean
    fun permissionGrantingStrategy(): DefaultPermissionGrantingStrategy {
        return DefaultPermissionGrantingStrategy(ConsoleAuditLogger())
    }

    @Bean
    fun authorizationStrategy(): AclAuthorizationStrategyImpl {
        return AclAuthorizationStrategyImpl(SimpleGrantedAuthority("ROLE_ADMIN"))
    }

    @Bean
    fun permissionEvaluator(
            dataSource: DataSource,
            lookupStrategy: BasicLookupStrategy,
            aclCache: SpringCacheBasedAclCache
    ): AclPermissionEvaluator {
        return AclPermissionEvaluator(jdbcMutableAclService(dataSource, lookupStrategy, aclCache))
    }
}