buildscript {
    ext.kotlin_version = '1.2.61'
    ext.spring_boot_version = '2.0.4.RELEASE'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath 'gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:5.1.0'
        classpath 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.5'
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.61"
    id "org.jetbrains.kotlin.plugin.spring" version "1.2.61"
    id "org.jetbrains.kotlin.plugin.jpa" version "1.2.61"
    id "org.springframework.boot" version "2.0.4.RELEASE"
    id "com.github.ben-manes.versions" version "0.20.0"
    id "com.diffplug.gradle.spotless" version "3.14.0"
    id "info.solidsoft.pitest" version "1.3.0"
}

group 'com.tngtech.apicenter'
version '1.0.0-SNAPSHOT'

bootJar {
    manifest {
        attributes 'License': 'Apache License Version 2.0, January 2004'
    }
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.springframework.boot:spring-boot-starter-web:$spring_boot_version"
    compile "org.springframework.boot:spring-boot-starter-security:$spring_boot_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:$spring_boot_version"
    compile "com.h2database:h2:1.4.197"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.6"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.6"
    compile "com.jayway.jsonpath:json-path:2.4.0"
    compile "org.apache.commons:commons-io:1.3.2"
    compile "net.rakugakibox.spring.boot:orika-spring-boot-starter:1.8.0"
    compile "org.hibernate:hibernate-search-orm:5.10.3.Final"
    compile "com.atlassian.crowd:crowd-integration-springsecurity:3.0.1"
    compile "com.auth0:java-jwt:3.4.0"

    testCompile "org.springframework.boot:spring-boot-starter-test:$spring_boot_version"
    testCompile "org.springframework.security:spring-security-test:5.0.8.RELEASE"
    testCompile "org.assertj:assertj-core:3.11.1"
    testCompile "com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-RC2"

    implementation project(':frontend')
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

configurations {
    integrationTestCompile.extendsFrom testCompile
}

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

task('copyFrontendDist', type: Copy) {
    println 'Copying Angular frontend build files to static directory'
    from(file('../frontend/dist'))
    into(file('src/main/resources/public'))
}

tasks.findByName('processResources').dependsOn('copyFrontendDist')